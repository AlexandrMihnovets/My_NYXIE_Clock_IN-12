
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000266  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000024f  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018e  00000000  00000000  000005cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b5  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  00000a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018b  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f8  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e6       	ldi	r30, 0x66	; 102
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	68 d0       	rcall	.+208    	; 0x11a <main>
  4a:	0b c1       	rjmp	.+534    	; 0x262 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <decoder>:

#endif /* FUNCTIONS_H_ */

void decoder(void)
{
	switch(anode)
  4e:	80 91 60 00 	lds	r24, 0x0060
  52:	83 30       	cpi	r24, 0x03	; 3
  54:	49 f1       	breq	.+82     	; 0xa8 <decoder+0x5a>
  56:	28 f4       	brcc	.+10     	; 0x62 <decoder+0x14>
  58:	81 30       	cpi	r24, 0x01	; 1
  5a:	51 f0       	breq	.+20     	; 0x70 <decoder+0x22>
  5c:	82 30       	cpi	r24, 0x02	; 2
  5e:	b1 f0       	breq	.+44     	; 0x8c <decoder+0x3e>
  60:	5a c0       	rjmp	.+180    	; 0x116 <decoder+0xc8>
  62:	85 30       	cpi	r24, 0x05	; 5
  64:	e9 f1       	breq	.+122    	; 0xe0 <decoder+0x92>
  66:	70 f1       	brcs	.+92     	; 0xc4 <decoder+0x76>
  68:	86 30       	cpi	r24, 0x06	; 6
  6a:	09 f4       	brne	.+2      	; 0x6e <decoder+0x20>
  6c:	47 c0       	rjmp	.+142    	; 0xfc <decoder+0xae>
  6e:	53 c0       	rjmp	.+166    	; 0x116 <decoder+0xc8>
	{
		case 1: PORTC |= (1 << numbers[0]);
  70:	45 b3       	in	r20, 0x15	; 21
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	c9 01       	movw	r24, r18
  78:	00 90 61 00 	lds	r0, 0x0061
  7c:	02 c0       	rjmp	.+4      	; 0x82 <decoder+0x34>
  7e:	88 0f       	add	r24, r24
  80:	99 1f       	adc	r25, r25
  82:	0a 94       	dec	r0
  84:	e2 f7       	brpl	.-8      	; 0x7e <decoder+0x30>
  86:	84 2b       	or	r24, r20
  88:	85 bb       	out	0x15, r24	; 21
		break;
  8a:	45 c0       	rjmp	.+138    	; 0x116 <decoder+0xc8>
		case 2: PORTC |= (1 << numbers[1]);;
  8c:	45 b3       	in	r20, 0x15	; 21
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	c9 01       	movw	r24, r18
  94:	00 90 62 00 	lds	r0, 0x0062
  98:	02 c0       	rjmp	.+4      	; 0x9e <decoder+0x50>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <decoder+0x4c>
  a2:	84 2b       	or	r24, r20
  a4:	85 bb       	out	0x15, r24	; 21
		break;
  a6:	37 c0       	rjmp	.+110    	; 0x116 <decoder+0xc8>
		case 3: PORTC |= (1 << numbers[2]);;
  a8:	45 b3       	in	r20, 0x15	; 21
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	c9 01       	movw	r24, r18
  b0:	00 90 63 00 	lds	r0, 0x0063
  b4:	02 c0       	rjmp	.+4      	; 0xba <decoder+0x6c>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <decoder+0x68>
  be:	84 2b       	or	r24, r20
  c0:	85 bb       	out	0x15, r24	; 21
		break;
  c2:	29 c0       	rjmp	.+82     	; 0x116 <decoder+0xc8>
		case 4: PORTC |= (1 << numbers[3]);;
  c4:	45 b3       	in	r20, 0x15	; 21
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	c9 01       	movw	r24, r18
  cc:	00 90 64 00 	lds	r0, 0x0064
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <decoder+0x88>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <decoder+0x84>
  da:	84 2b       	or	r24, r20
  dc:	85 bb       	out	0x15, r24	; 21
		break;
  de:	1b c0       	rjmp	.+54     	; 0x116 <decoder+0xc8>
		case 5: PORTC |= (1 << numbers[4]);;
  e0:	45 b3       	in	r20, 0x15	; 21
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	c9 01       	movw	r24, r18
  e8:	00 90 65 00 	lds	r0, 0x0065
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <decoder+0xa4>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <decoder+0xa0>
  f6:	84 2b       	or	r24, r20
  f8:	85 bb       	out	0x15, r24	; 21
		break;
  fa:	0d c0       	rjmp	.+26     	; 0x116 <decoder+0xc8>
		case 6: PORTC |= (1 << numbers[5]);;
  fc:	45 b3       	in	r20, 0x15	; 21
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	c9 01       	movw	r24, r18
 104:	00 90 66 00 	lds	r0, 0x0066
 108:	02 c0       	rjmp	.+4      	; 0x10e <decoder+0xc0>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <decoder+0xbc>
 112:	84 2b       	or	r24, r20
 114:	85 bb       	out	0x15, r24	; 21
		break;
	}
	PORTC &= (~(1 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0));	//Обнуляем, чтобы мусор не копился
 116:	ab 98       	cbi	0x15, 3	; 21
 118:	08 95       	ret

0000011a <main>:

#include "all_include.h"

int main(void)
{
	ports_ini();	//Настройка портов
 11a:	06 d0       	rcall	.+12     	; 0x128 <ports_ini>
	
	timers_ini(1024);	//Timers initialisation
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	30 d0       	rcall	.+96     	; 0x182 <timers_ini>
	
	sei();			//Interrupts enable
 122:	78 94       	sei
	
    while(1)
    {
        decoder();
 124:	94 df       	rcall	.-216    	; 0x4e <decoder>
 126:	fe cf       	rjmp	.-4      	; 0x124 <main+0xa>

00000128 <ports_ini>:
#include <avr/io.h>

void ports_ini(void)		//Ports initialization
{
	//Port B
	DDRB |= (1 << PB0);		//T6
 128:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);	//Button1
 12a:	b9 98       	cbi	0x17, 1	; 23
	DDRB &= ~(1 << PB2);	//Button2
 12c:	ba 98       	cbi	0x17, 2	; 23
	DDRB &= ~(1 << PB3);	//Button3
 12e:	bb 98       	cbi	0x17, 3	; 23
	DDRB &= ~(1 << PB4);	//not wsed (only MISO)
 130:	bc 98       	cbi	0x17, 4	; 23
	DDRB &= ~(1 << PB5);	//T_Sens
 132:	bd 98       	cbi	0x17, 5	; 23
	DDRB |= (1 << PB6);		//T1
 134:	be 9a       	sbi	0x17, 6	; 23
	DDRB |= (1 << PB7);		//T2
 136:	bf 9a       	sbi	0x17, 7	; 23
	
	PORTB &= ~(1 << PB0);	//low
 138:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1 << PB1);	//low
 13a:	c1 98       	cbi	0x18, 1	; 24
	PORTB &= ~(1 << PB2);	//low
 13c:	c2 98       	cbi	0x18, 2	; 24
	PORTB &= ~(1 << PB3);	//low
 13e:	c3 98       	cbi	0x18, 3	; 24
	PORTB &= ~(1 << PB4);	//low
 140:	c4 98       	cbi	0x18, 4	; 24
	PORTB &= ~(1 << PB5);	//low
 142:	c5 98       	cbi	0x18, 5	; 24
	PORTB &= ~(1 << PB6);	//low
 144:	c6 98       	cbi	0x18, 6	; 24
	PORTB &= ~(1 << PB7);	//low
 146:	c7 98       	cbi	0x18, 7	; 24
	
	//************************************
	
	//Port C
	DDRC |= (1 << PC0);		//Address A
 148:	a0 9a       	sbi	0x14, 0	; 20
	DDRC |= (1 << PC1);		//Address D
 14a:	a1 9a       	sbi	0x14, 1	; 20
	DDRC |= (1 << PC2);		//Address B
 14c:	a2 9a       	sbi	0x14, 2	; 20
	DDRC |= (1 << PC3);		//Address C
 14e:	a3 9a       	sbi	0x14, 3	; 20
	DDRC |= (1 << PC4);		//DOT1
 150:	a4 9a       	sbi	0x14, 4	; 20
	DDRC |= (1 << PC5);		//DOT2
 152:	a5 9a       	sbi	0x14, 5	; 20
	
	PORTC &= ~(1 << PC0);	//low
 154:	a8 98       	cbi	0x15, 0	; 21
	PORTC &= ~(1 << PC1);	//low
 156:	a9 98       	cbi	0x15, 1	; 21
	PORTC &= ~(1 << PC2);	//low
 158:	aa 98       	cbi	0x15, 2	; 21
	PORTC &= ~(1 << PC3);	//low
 15a:	ab 98       	cbi	0x15, 3	; 21
	PORTC &= ~(1 << PC4);	//low
 15c:	ac 98       	cbi	0x15, 4	; 21
	PORTC &= ~(1 << PC5);	//low
 15e:	ad 98       	cbi	0x15, 5	; 21
	
	//************************************
	
	//Port D
	DDRD &= ~(1 << PD0);	//Rx
 160:	88 98       	cbi	0x11, 0	; 17
	DDRD |= (1 << PD1);		//Tx
 162:	89 9a       	sbi	0x11, 1	; 17
	DDRD &= ~(1 << PD2);	//SQW
 164:	8a 98       	cbi	0x11, 2	; 17
	DDRD &= ~(1 << PD3);	//not used
 166:	8b 98       	cbi	0x11, 3	; 17
	DDRD |= (1 << PD4);		//LED
 168:	8c 9a       	sbi	0x11, 4	; 17
	DDRD |= (1 << PD5);		//T3
 16a:	8d 9a       	sbi	0x11, 5	; 17
	DDRD |= (1 << PD6);		//T4
 16c:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1 << PD7);		//T5
 16e:	8f 9a       	sbi	0x11, 7	; 17
	
	DDRD &= ~(1 << PD0);	//low
 170:	88 98       	cbi	0x11, 0	; 17
	DDRD &= ~(1 << PD1);	//low
 172:	89 98       	cbi	0x11, 1	; 17
	PORTD &= ~(1 << PD2);	//low
 174:	92 98       	cbi	0x12, 2	; 18
	PORTD &= ~(1 << PD3);	//low
 176:	93 98       	cbi	0x12, 3	; 18
	PORTD &= ~(1 << PD4);	//low
 178:	94 98       	cbi	0x12, 4	; 18
	PORTD &= ~(1 << PD5);	//low
 17a:	95 98       	cbi	0x12, 5	; 18
	PORTD &= ~(1 << PD6);	//low
 17c:	96 98       	cbi	0x12, 6	; 18
	PORTD &= ~(1 << PD7);	//low
 17e:	97 98       	cbi	0x12, 7	; 18
 180:	08 95       	ret

00000182 <timers_ini>:
		128		1		0		1
		256		1		1		0
		1024	1		1		1
	*/
	
	switch(prescaler)
 182:	80 34       	cpi	r24, 0x40	; 64
 184:	91 05       	cpc	r25, r1
 186:	b9 f1       	breq	.+110    	; 0x1f6 <timers_ini+0x74>
 188:	50 f4       	brcc	.+20     	; 0x19e <timers_ini+0x1c>
 18a:	88 30       	cpi	r24, 0x08	; 8
 18c:	91 05       	cpc	r25, r1
 18e:	f9 f0       	breq	.+62     	; 0x1ce <timers_ini+0x4c>
 190:	80 32       	cpi	r24, 0x20	; 32
 192:	91 05       	cpc	r25, r1
 194:	31 f1       	breq	.+76     	; 0x1e2 <timers_ini+0x60>
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	09 f0       	breq	.+2      	; 0x19c <timers_ini+0x1a>
 19a:	55 c0       	rjmp	.+170    	; 0x246 <timers_ini+0xc4>
 19c:	0e c0       	rjmp	.+28     	; 0x1ba <timers_ini+0x38>
 19e:	81 15       	cp	r24, r1
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	92 07       	cpc	r25, r18
 1a4:	e1 f1       	breq	.+120    	; 0x21e <timers_ini+0x9c>
 1a6:	81 15       	cp	r24, r1
 1a8:	24 e0       	ldi	r18, 0x04	; 4
 1aa:	92 07       	cpc	r25, r18
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <timers_ini+0x2e>
 1ae:	41 c0       	rjmp	.+130    	; 0x232 <timers_ini+0xb0>
 1b0:	80 38       	cpi	r24, 0x80	; 128
 1b2:	91 05       	cpc	r25, r1
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <timers_ini+0x36>
 1b6:	47 c0       	rjmp	.+142    	; 0x246 <timers_ini+0xc4>
 1b8:	28 c0       	rjmp	.+80     	; 0x20a <timers_ini+0x88>
	{
		case 1:		TCCR2 |= (1 << CS20);
 1ba:	85 b5       	in	r24, 0x25	; 37
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	85 bd       	out	0x25, r24	; 37
					TCCR2 &= ~(1 << CS21);
 1c0:	85 b5       	in	r24, 0x25	; 37
 1c2:	8d 7f       	andi	r24, 0xFD	; 253
 1c4:	85 bd       	out	0x25, r24	; 37
					TCCR2 &= ~(1 << CS22);
 1c6:	85 b5       	in	r24, 0x25	; 37
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	85 bd       	out	0x25, r24	; 37
			break;
 1cc:	45 c0       	rjmp	.+138    	; 0x258 <timers_ini+0xd6>
		case 8:		TCCR2 &= ~(1 << CS20);
 1ce:	85 b5       	in	r24, 0x25	; 37
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS21);
 1d4:	85 b5       	in	r24, 0x25	; 37
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	85 bd       	out	0x25, r24	; 37
					TCCR2 &= ~(1 << CS22);
 1da:	85 b5       	in	r24, 0x25	; 37
 1dc:	8b 7f       	andi	r24, 0xFB	; 251
 1de:	85 bd       	out	0x25, r24	; 37
			break;
 1e0:	3b c0       	rjmp	.+118    	; 0x258 <timers_ini+0xd6>
		case 32:	TCCR2 &= ~(1 << CS20);
 1e2:	85 b5       	in	r24, 0x25	; 37
 1e4:	8e 7f       	andi	r24, 0xFE	; 254
 1e6:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS21);
 1e8:	85 b5       	in	r24, 0x25	; 37
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS22);
 1ee:	85 b5       	in	r24, 0x25	; 37
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	85 bd       	out	0x25, r24	; 37
			break;
 1f4:	31 c0       	rjmp	.+98     	; 0x258 <timers_ini+0xd6>
		case 64:	TCCR2 &= ~(1 << CS20);
 1f6:	85 b5       	in	r24, 0x25	; 37
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
 1fa:	85 bd       	out	0x25, r24	; 37
					TCCR2 &= ~(1 << CS21);
 1fc:	85 b5       	in	r24, 0x25	; 37
 1fe:	8d 7f       	andi	r24, 0xFD	; 253
 200:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS22);
 202:	85 b5       	in	r24, 0x25	; 37
 204:	84 60       	ori	r24, 0x04	; 4
 206:	85 bd       	out	0x25, r24	; 37
			break;
 208:	27 c0       	rjmp	.+78     	; 0x258 <timers_ini+0xd6>
		case 128:	TCCR2 |= (1 << CS20);
 20a:	85 b5       	in	r24, 0x25	; 37
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	85 bd       	out	0x25, r24	; 37
					TCCR2 &= ~(1 << CS21);
 210:	85 b5       	in	r24, 0x25	; 37
 212:	8d 7f       	andi	r24, 0xFD	; 253
 214:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS22);
 216:	85 b5       	in	r24, 0x25	; 37
 218:	84 60       	ori	r24, 0x04	; 4
 21a:	85 bd       	out	0x25, r24	; 37
			break;
 21c:	1d c0       	rjmp	.+58     	; 0x258 <timers_ini+0xd6>
		case 256:	TCCR2 &= ~(1 << CS20);
 21e:	85 b5       	in	r24, 0x25	; 37
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS21);
 224:	85 b5       	in	r24, 0x25	; 37
 226:	82 60       	ori	r24, 0x02	; 2
 228:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS22);
 22a:	85 b5       	in	r24, 0x25	; 37
 22c:	84 60       	ori	r24, 0x04	; 4
 22e:	85 bd       	out	0x25, r24	; 37
			break;
 230:	13 c0       	rjmp	.+38     	; 0x258 <timers_ini+0xd6>
		case 1024:	TCCR2 |= (1 << CS20);
 232:	85 b5       	in	r24, 0x25	; 37
 234:	81 60       	ori	r24, 0x01	; 1
 236:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS21);
 238:	85 b5       	in	r24, 0x25	; 37
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS22);
 23e:	85 b5       	in	r24, 0x25	; 37
 240:	84 60       	ori	r24, 0x04	; 4
 242:	85 bd       	out	0x25, r24	; 37
			break;
 244:	09 c0       	rjmp	.+18     	; 0x258 <timers_ini+0xd6>
		default:	TCCR2 |= (1 << CS20);	//По умолчанию \1024
 246:	85 b5       	in	r24, 0x25	; 37
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS21);
 24c:	85 b5       	in	r24, 0x25	; 37
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	85 bd       	out	0x25, r24	; 37
					TCCR2 |= (1 << CS22);
 252:	85 b5       	in	r24, 0x25	; 37
 254:	84 60       	ori	r24, 0x04	; 4
 256:	85 bd       	out	0x25, r24	; 37
	}
	
	
	//Reset Timer2 register
	TCNT2 = 0;
 258:	14 bc       	out	0x24, r1	; 36
	
	//Interrupts for Timer1
	TIMSK |= TOIE2;		//Overflow interrupt enable
 25a:	89 b7       	in	r24, 0x39	; 57
 25c:	86 60       	ori	r24, 0x06	; 6
 25e:	89 bf       	out	0x39, r24	; 57
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
