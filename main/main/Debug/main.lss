
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000220  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000031b  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e8  00000000  00000000  0000064b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002cd  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000088  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000210  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015b  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	32 c0       	rjmp	.+100    	; 0x8c <decoder+0x18>
  28:	37 c0       	rjmp	.+110    	; 0x98 <decoder+0x24>
  2a:	3c c0       	rjmp	.+120    	; 0xa4 <decoder+0x30>
  2c:	41 c0       	rjmp	.+130    	; 0xb0 <decoder+0x3c>
  2e:	46 c0       	rjmp	.+140    	; 0xbc <decoder+0x48>
  30:	4b c0       	rjmp	.+150    	; 0xc8 <decoder+0x54>
  32:	50 c0       	rjmp	.+160    	; 0xd4 <decoder+0x60>
  34:	55 c0       	rjmp	.+170    	; 0xe0 <decoder+0x6c>
  36:	5a c0       	rjmp	.+180    	; 0xec <decoder+0x78>
  38:	5f c0       	rjmp	.+190    	; 0xf8 <decoder+0x84>
  3a:	64 c0       	rjmp	.+200    	; 0x104 <decoder+0x90>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf e5       	ldi	r28, 0x5F	; 95
  42:	d4 e0       	ldi	r29, 0x04	; 4
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	e0 e2       	ldi	r30, 0x20	; 32
  50:	f2 e0       	ldi	r31, 0x02	; 2
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	ac 36       	cpi	r26, 0x6C	; 108
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	ac e6       	ldi	r26, 0x6C	; 108
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	ac 36       	cpi	r26, 0x6C	; 108
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	95 d0       	rcall	.+298    	; 0x19a <main>
  70:	d5 c0       	rjmp	.+426    	; 0x21c <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <decoder>:

#endif /* FUNCTIONS_H_ */

void decoder(uint8_t a)		//Функция управления дешифратором
{
	PORTC &= ~((1 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0));	//Обнуляем, чтобы мусор не копился
  74:	95 b3       	in	r25, 0x15	; 21
  76:	90 7f       	andi	r25, 0xF0	; 240
  78:	95 bb       	out	0x15, r25	; 21
	switch(a)
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	8b 30       	cpi	r24, 0x0B	; 11
  7e:	91 05       	cpc	r25, r1
  80:	08 f0       	brcs	.+2      	; 0x84 <decoder+0x10>
  82:	45 c0       	rjmp	.+138    	; 0x10e <decoder+0x9a>
  84:	fc 01       	movw	r30, r24
  86:	ed 5e       	subi	r30, 0xED	; 237
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	09 94       	ijmp
	{
		case 0: PORTC |= numbers[0];
  8c:	95 b3       	in	r25, 0x15	; 21
  8e:	80 91 61 00 	lds	r24, 0x0061
  92:	89 2b       	or	r24, r25
  94:	85 bb       	out	0x15, r24	; 21
			break;
  96:	08 95       	ret
		case 1: PORTC |= numbers[1];
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	80 91 62 00 	lds	r24, 0x0062
  9e:	89 2b       	or	r24, r25
  a0:	85 bb       	out	0x15, r24	; 21
			break;
  a2:	08 95       	ret
		case 2: PORTC |= numbers[2];
  a4:	95 b3       	in	r25, 0x15	; 21
  a6:	80 91 63 00 	lds	r24, 0x0063
  aa:	89 2b       	or	r24, r25
  ac:	85 bb       	out	0x15, r24	; 21
			break;
  ae:	08 95       	ret
		case 3: PORTC |= numbers[3];
  b0:	95 b3       	in	r25, 0x15	; 21
  b2:	80 91 64 00 	lds	r24, 0x0064
  b6:	89 2b       	or	r24, r25
  b8:	85 bb       	out	0x15, r24	; 21
			break;
  ba:	08 95       	ret
		case 4: PORTC |= numbers[4];
  bc:	95 b3       	in	r25, 0x15	; 21
  be:	80 91 65 00 	lds	r24, 0x0065
  c2:	89 2b       	or	r24, r25
  c4:	85 bb       	out	0x15, r24	; 21
			break;
  c6:	08 95       	ret
		case 5: PORTC |= numbers[5];
  c8:	95 b3       	in	r25, 0x15	; 21
  ca:	80 91 66 00 	lds	r24, 0x0066
  ce:	89 2b       	or	r24, r25
  d0:	85 bb       	out	0x15, r24	; 21
			break;
  d2:	08 95       	ret
		case 6: PORTC |= numbers[6];
  d4:	95 b3       	in	r25, 0x15	; 21
  d6:	80 91 67 00 	lds	r24, 0x0067
  da:	89 2b       	or	r24, r25
  dc:	85 bb       	out	0x15, r24	; 21
			break;
  de:	08 95       	ret
		case 7: PORTC |= numbers[7];
  e0:	95 b3       	in	r25, 0x15	; 21
  e2:	80 91 68 00 	lds	r24, 0x0068
  e6:	89 2b       	or	r24, r25
  e8:	85 bb       	out	0x15, r24	; 21
			break;
  ea:	08 95       	ret
		case 8: PORTC |= numbers[8];
  ec:	95 b3       	in	r25, 0x15	; 21
  ee:	80 91 69 00 	lds	r24, 0x0069
  f2:	89 2b       	or	r24, r25
  f4:	85 bb       	out	0x15, r24	; 21
			break;
  f6:	08 95       	ret
		case 9: PORTC |= numbers[9];
  f8:	95 b3       	in	r25, 0x15	; 21
  fa:	80 91 6a 00 	lds	r24, 0x006A
  fe:	89 2b       	or	r24, r25
 100:	85 bb       	out	0x15, r24	; 21
			break;
 102:	08 95       	ret
		case 10: PORTC |= numbers[10];
 104:	95 b3       	in	r25, 0x15	; 21
 106:	80 91 6b 00 	lds	r24, 0x006B
 10a:	89 2b       	or	r24, r25
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	08 95       	ret

00000110 <anode_switching>:
}
*/

void anode_switching(void)		//Функция переключения ламп
{
	switch(anode)	//Следим за глобальной переменной anode для переключения анодов
 110:	80 91 60 00 	lds	r24, 0x0060
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	d1 f0       	breq	.+52     	; 0x14c <anode_switching+0x3c>
 118:	28 f4       	brcc	.+10     	; 0x124 <anode_switching+0x14>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	49 f0       	breq	.+18     	; 0x130 <anode_switching+0x20>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	71 f0       	breq	.+28     	; 0x13e <anode_switching+0x2e>
 122:	2f c0       	rjmp	.+94     	; 0x182 <anode_switching+0x72>
 124:	85 30       	cpi	r24, 0x05	; 5
 126:	01 f1       	breq	.+64     	; 0x168 <anode_switching+0x58>
 128:	c0 f0       	brcs	.+48     	; 0x15a <anode_switching+0x4a>
 12a:	86 30       	cpi	r24, 0x06	; 6
 12c:	21 f1       	breq	.+72     	; 0x176 <anode_switching+0x66>
 12e:	29 c0       	rjmp	.+82     	; 0x182 <anode_switching+0x72>
	{
		case 1:	PORTB |=  (1 << PB6);
 130:	c6 9a       	sbi	0x18, 6	; 24
		PORTB &= ~(1 << PB7);
 132:	c7 98       	cbi	0x18, 7	; 24
		PORTD &= ~(1 << PD5);
 134:	95 98       	cbi	0x12, 5	; 18
		PORTD &= ~(1 << PD6);
 136:	96 98       	cbi	0x12, 6	; 18
		PORTD &= ~(1 << PD7);
 138:	97 98       	cbi	0x12, 7	; 18
		PORTB &= ~(1 << PB0);
 13a:	c0 98       	cbi	0x18, 0	; 24
			break;
 13c:	22 c0       	rjmp	.+68     	; 0x182 <anode_switching+0x72>
			
		case 2: PORTB &= ~(1 << PB6);
 13e:	c6 98       	cbi	0x18, 6	; 24
		PORTB |=  (1 << PB7);
 140:	c7 9a       	sbi	0x18, 7	; 24
		PORTD &= ~(1 << PD5);
 142:	95 98       	cbi	0x12, 5	; 18
		PORTD &= ~(1 << PD6);
 144:	96 98       	cbi	0x12, 6	; 18
		PORTD &= ~(1 << PD7);
 146:	97 98       	cbi	0x12, 7	; 18
		PORTB &= ~(1 << PB0);
 148:	c0 98       	cbi	0x18, 0	; 24
			break;
 14a:	1b c0       	rjmp	.+54     	; 0x182 <anode_switching+0x72>
			
		case 3: PORTB &= ~(1 << PB6);
 14c:	c6 98       	cbi	0x18, 6	; 24
		PORTB &= ~(1 << PB7);
 14e:	c7 98       	cbi	0x18, 7	; 24
		PORTD |=  (1 << PD5);
 150:	95 9a       	sbi	0x12, 5	; 18
		PORTD &= ~(1 << PD6);
 152:	96 98       	cbi	0x12, 6	; 18
		PORTD &= ~(1 << PD7);
 154:	97 98       	cbi	0x12, 7	; 18
		PORTB &= ~(1 << PB0);
 156:	c0 98       	cbi	0x18, 0	; 24
			break;
 158:	14 c0       	rjmp	.+40     	; 0x182 <anode_switching+0x72>
			
		case 4: PORTB &= ~(1 << PB6);
 15a:	c6 98       	cbi	0x18, 6	; 24
		PORTB &= ~(1 << PB7);
 15c:	c7 98       	cbi	0x18, 7	; 24
		PORTD &= ~(1 << PD5);
 15e:	95 98       	cbi	0x12, 5	; 18
		PORTD |=  (1 << PD6);
 160:	96 9a       	sbi	0x12, 6	; 18
		PORTD &= ~(1 << PD7);
 162:	97 98       	cbi	0x12, 7	; 18
		PORTB &= ~(1 << PB0);
 164:	c0 98       	cbi	0x18, 0	; 24
			break;
 166:	0d c0       	rjmp	.+26     	; 0x182 <anode_switching+0x72>
			
		case 5: PORTB &= ~(1 << PB6);
 168:	c6 98       	cbi	0x18, 6	; 24
		PORTB &= ~(1 << PB7);
 16a:	c7 98       	cbi	0x18, 7	; 24
		PORTD &= ~(1 << PD5);
 16c:	95 98       	cbi	0x12, 5	; 18
		PORTD &= ~(1 << PD6);
 16e:	96 98       	cbi	0x12, 6	; 18
		PORTD |=  (1 << PD7);
 170:	97 9a       	sbi	0x12, 7	; 18
		PORTB &= ~(1 << PB0);
 172:	c0 98       	cbi	0x18, 0	; 24
			break;
 174:	06 c0       	rjmp	.+12     	; 0x182 <anode_switching+0x72>
			
		case 6: PORTB &= ~(1 << PB6);
 176:	c6 98       	cbi	0x18, 6	; 24
		PORTB &= ~(1 << PB7);
 178:	c7 98       	cbi	0x18, 7	; 24
		PORTD &= ~(1 << PD5);
 17a:	95 98       	cbi	0x12, 5	; 18
		PORTD &= ~(1 << PD6);
 17c:	96 98       	cbi	0x12, 6	; 18
		PORTD &= ~(1 << PD7);
 17e:	97 98       	cbi	0x12, 7	; 18
		PORTB |=  (1 << PB0);
 180:	c0 9a       	sbi	0x18, 0	; 24
			break;
	}
	
	anode++;
 182:	80 91 60 00 	lds	r24, 0x0060
 186:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(anode > 6) anode = 1;
 188:	87 30       	cpi	r24, 0x07	; 7
 18a:	18 f4       	brcc	.+6      	; 0x192 <anode_switching+0x82>
		PORTD &= ~(1 << PD7);
		PORTB |=  (1 << PB0);
			break;
	}
	
	anode++;
 18c:	80 93 60 00 	sts	0x0060, r24
 190:	08 95       	ret
	
	if(anode > 6) anode = 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 60 00 	sts	0x0060, r24
 198:	08 95       	ret

0000019a <main>:

#include "all_include.h"

int main(void)
{
	ports_ini();	//Настройка портов
 19a:	13 d0       	rcall	.+38     	; 0x1c2 <ports_ini>
	
	//sei();			//Interrupts enable
	
    while(1)
    {
		for(uint8_t i = 0; i <= 10; i++)
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			decoder(i);
 1a0:	8c 2f       	mov	r24, r28
 1a2:	68 df       	rcall	.-304    	; 0x74 <decoder>
			
			anode_switching();
 1a4:	b5 df       	rcall	.-150    	; 0x110 <anode_switching>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	80 e7       	ldi	r24, 0x70	; 112
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x12>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x1c>
 1b6:	00 00       	nop
	
	//sei();			//Interrupts enable
	
    while(1)
    {
		for(uint8_t i = 0; i <= 10; i++)
 1b8:	cf 5f       	subi	r28, 0xFF	; 255
 1ba:	cb 30       	cpi	r28, 0x0B	; 11
 1bc:	88 f3       	brcs	.-30     	; 0x1a0 <main+0x6>
 1be:	cd 2f       	mov	r28, r29
 1c0:	ef cf       	rjmp	.-34     	; 0x1a0 <main+0x6>

000001c2 <ports_ini>:
#include <avr/io.h>

void ports_ini(void)		//Ports initialization
{
	//Port B
	DDRB |= (1 << PB0);		//T6
 1c2:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1 << PB1);	//Button1
 1c4:	b9 98       	cbi	0x17, 1	; 23
	DDRB &= ~(1 << PB2);	//Button2
 1c6:	ba 98       	cbi	0x17, 2	; 23
	DDRB &= ~(1 << PB3);	//Button3
 1c8:	bb 98       	cbi	0x17, 3	; 23
	DDRB &= ~(1 << PB4);	//not wsed (only MISO)
 1ca:	bc 98       	cbi	0x17, 4	; 23
	DDRB &= ~(1 << PB5);	//T_Sens
 1cc:	bd 98       	cbi	0x17, 5	; 23
	DDRB |= (1 << PB6);		//T1
 1ce:	be 9a       	sbi	0x17, 6	; 23
	DDRB |= (1 << PB7);		//T2
 1d0:	bf 9a       	sbi	0x17, 7	; 23
	
	PORTB &= ~(1 << PB0);	//low
 1d2:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1 << PB1);	//low
 1d4:	c1 98       	cbi	0x18, 1	; 24
	PORTB &= ~(1 << PB2);	//low
 1d6:	c2 98       	cbi	0x18, 2	; 24
	PORTB &= ~(1 << PB3);	//low
 1d8:	c3 98       	cbi	0x18, 3	; 24
	PORTB &= ~(1 << PB4);	//low
 1da:	c4 98       	cbi	0x18, 4	; 24
	PORTB &= ~(1 << PB5);	//low
 1dc:	c5 98       	cbi	0x18, 5	; 24
	PORTB &= ~(1 << PB6);	//low
 1de:	c6 98       	cbi	0x18, 6	; 24
	PORTB &= ~(1 << PB7);	//low
 1e0:	c7 98       	cbi	0x18, 7	; 24
	
	//************************************
	
	//Port C
	DDRC |= (1 << PC0);		//Address A
 1e2:	a0 9a       	sbi	0x14, 0	; 20
	DDRC |= (1 << PC1);		//Address D
 1e4:	a1 9a       	sbi	0x14, 1	; 20
	DDRC |= (1 << PC2);		//Address B
 1e6:	a2 9a       	sbi	0x14, 2	; 20
	DDRC |= (1 << PC3);		//Address C
 1e8:	a3 9a       	sbi	0x14, 3	; 20
	DDRC |= (1 << PC4);		//DOT1
 1ea:	a4 9a       	sbi	0x14, 4	; 20
	DDRC |= (1 << PC5);		//DOT2
 1ec:	a5 9a       	sbi	0x14, 5	; 20
	
	PORTC &= ~(1 << PC0);	//low
 1ee:	a8 98       	cbi	0x15, 0	; 21
	PORTC &= ~(1 << PC1);	//low
 1f0:	a9 98       	cbi	0x15, 1	; 21
	PORTC &= ~(1 << PC2);	//low
 1f2:	aa 98       	cbi	0x15, 2	; 21
	PORTC &= ~(1 << PC3);	//low
 1f4:	ab 98       	cbi	0x15, 3	; 21
	PORTC &= ~(1 << PC4);	//low
 1f6:	ac 98       	cbi	0x15, 4	; 21
	PORTC &= ~(1 << PC5);	//low
 1f8:	ad 98       	cbi	0x15, 5	; 21
	
	//************************************
	
	//Port D
	DDRD &= ~(1 << PD0);	//Rx
 1fa:	88 98       	cbi	0x11, 0	; 17
	DDRD |= (1 << PD1);		//Tx
 1fc:	89 9a       	sbi	0x11, 1	; 17
	DDRD &= ~(1 << PD2);	//SQW
 1fe:	8a 98       	cbi	0x11, 2	; 17
	DDRD &= ~(1 << PD3);	//not used
 200:	8b 98       	cbi	0x11, 3	; 17
	DDRD |= (1 << PD4);		//LED
 202:	8c 9a       	sbi	0x11, 4	; 17
	DDRD |= (1 << PD5);		//T3
 204:	8d 9a       	sbi	0x11, 5	; 17
	DDRD |= (1 << PD6);		//T4
 206:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1 << PD7);		//T5
 208:	8f 9a       	sbi	0x11, 7	; 17
	
	DDRD &= ~(1 << PD0);	//low
 20a:	88 98       	cbi	0x11, 0	; 17
	DDRD &= ~(1 << PD1);	//low
 20c:	89 98       	cbi	0x11, 1	; 17
	PORTD &= ~(1 << PD2);	//low
 20e:	92 98       	cbi	0x12, 2	; 18
	PORTD &= ~(1 << PD3);	//low
 210:	93 98       	cbi	0x12, 3	; 18
	PORTD &= ~(1 << PD4);	//low
 212:	94 98       	cbi	0x12, 4	; 18
	PORTD &= ~(1 << PD5);	//low
 214:	95 98       	cbi	0x12, 5	; 18
	PORTD &= ~(1 << PD6);	//low
 216:	96 98       	cbi	0x12, 6	; 18
	PORTD &= ~(1 << PD7);	//low
 218:	97 98       	cbi	0x12, 7	; 18
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
